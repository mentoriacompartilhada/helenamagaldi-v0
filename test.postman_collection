{
	"info": {
		"_postman_id": "8a6f0c81-dd1e-460f-9d1c-713450a8e3b2",
		"name": "Mentoria Compartilhada",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pessoas",
			"item": [
				{
					"name": "Listar Pessoas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"checkOrSet(\"STAGE\",0);\r",
									"checkOrSet(\"LISTPAGE\",0);\r",
									"checkOrSet(\"LISTSIZE\",10);\r",
									"\r",
									"function checkOrSet(paramName,defaultValue){\r",
									"    var test = pm.environment.get(paramName);\r",
									"    if( !test) {\r",
									"        pm.environment.set(paramName,defaultValue);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let passed = false;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    passed = true;\r",
									"});\r",
									"\r",
									"schemaValidation();\r",
									"\r",
									"let stage = parseInt(pm.environment.get(\"STAGE\"));\r",
									"\r",
									"switch(stage){\r",
									"    case 0: stage0(); break;\r",
									"    case 1: stage1(); break;\r",
									"    case 2: stage2(); break;\r",
									"    case 3: {\r",
									"        stage3(0,10); \r",
									"        pm.environment.set(\"LISTSIZE\",2);\r",
									"        break;\r",
									"    }\r",
									"    case 4:{ \r",
									"        stage3(0,2); \r",
									"        pm.environment.set(\"LISTPAGE\",3);\r",
									"        break;\r",
									"    }\r",
									"    case 5:{ \r",
									"        stage3(3,2); \r",
									"        postman.setNextRequest(\"Hello World\");\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"function stage0(){\r",
									"\r",
									"    pm.test(\"List should be empty\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.page).to.eql(0);\r",
									"        pm.expect(jsonData.total).to.eql(0);\r",
									"        pm.expect(jsonData.items).to.be.an('array').to.be.empty;\r",
									"    });\r",
									"    postman.setNextRequest(\"Adicionar Pessoa\");\r",
									"}\r",
									"\r",
									"function stage1(){\r",
									"    pm.test(\"List should contain only a single entry\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.page).to.eql(0);\r",
									"        pm.expect(jsonData.total).to.eql(1);\r",
									"        pm.expect(jsonData.items).to.be.an('array').to.not.be.empty;\r",
									"        pm.expect(jsonData.items[0].id).to.eql(parseInt(pm.environment.get(\"ID\")));\r",
									"        pm.expect(jsonData.items[0].nome).to.eql(pm.environment.get(\"FULLNAME\"));\r",
									"        pm.expect(jsonData.items[0].email).to.eql(pm.environment.get(\"EMAIL\"));\r",
									"        pm.expect(jsonData.items[0].password).to.eql(pm.environment.get(\"PWD\"));\r",
									"    });\r",
									"    postman.setNextRequest(\"Atualizar Pessoa\");\r",
									"}\r",
									"\r",
									"function stage2(){\r",
									"    stage0();\r",
									"}\r",
									"\r",
									"function stage3(page, size){\r",
									"    var stage = pm.environment.get(\"STAGE\");\r",
									"    pm.environment.set(\"STAGE\",stage+1);\r",
									"\r",
									"    pm.test(`List should contain ${size} entries on page ${page}`, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.page).to.eql(page);\r",
									"        pm.expect(jsonData.total).to.eql(10);\r",
									"        pm.expect(jsonData.size).to.eql(size);\r",
									"        pm.expect(jsonData.items).to.be.an('array').to.have.lengthOf(size);\r",
									"    });\r",
									"    postman.setNextRequest(\"Listar Pessoas\");\r",
									"}\r",
									"\r",
									"function schemaValidation(){\r",
									"    \r",
									"    const schema = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"page\":{\r",
									"                \"type\":\"integer\"\r",
									"            },\r",
									"            \"size\": {\r",
									"                \"type\":\"integer\"\r",
									"            },\r",
									"            \"total\": {\r",
									"                \"type\":\"integer\"\r",
									"            },\r",
									"            \"items\":{\r",
									"                \"type\":\"array\",\r",
									"                \"items\":{\r",
									"                    \"type\":\"object\",\r",
									"                    \"properties\":{\r",
									"                        \"id\":{\r",
									"                            \"type\":\"integer\"\r",
									"                        },\r",
									"                        \"nome\":{\r",
									"                            \"type\":\"string\"\r",
									"                        },\r",
									"                        \"email\":{\r",
									"                            \"type\":\"string\"\r",
									"                        },\r",
									"                        \"password\":{\r",
									"                            \"type\":\"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\":[ \"id\",\"nome\",\"email\",\"password\" ]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\":[ \"page\",\"size\",\"total\",\"items\" ]\r",
									"    };\r",
									"\r",
									"    const schemaObject = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"id\":{\r",
									"                \"type\":\"integer\"\r",
									"            },\r",
									"            \"nome\":{\r",
									"                \"type\":\"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\":\"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\":\"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\":[ \"id\",\"nome\",\"email\",\"password\" ]\r",
									"    };\r",
									"\r",
									"    pm.test('Validating Schema',() =>{\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"}\r",
									"\r",
									"if(!passed){\r",
									"    pm.environment.set(\"STAGE\",6);\r",
									"    postman.setNextRequest(\"Hello World\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{SERVER}}/api/pessoas?page={{LISTPAGE}}&size={{LISTSIZE}}",
							"protocol": "http",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"api",
								"pessoas"
							],
							"query": [
								{
									"key": "page",
									"value": "{{LISTPAGE}}"
								},
								{
									"key": "size",
									"value": "{{LISTSIZE}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista Vazia",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:51:31 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"page\": 0,\n    \"size\": 10,\n    \"total\": 0,\n    \"items\": []\n}"
						},
						{
							"name": "Lista com Conteudo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:52:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"page\": 0,\n    \"size\": 10,\n    \"total\": 1,\n    \"items\": [\n        {\n            \"id\": 1,\n            \"nome\": \"Lynn Cassin\",\n            \"email\": \"Chad.Lang44@hotmail.com\",\n            \"password\": \"cDT7orB8Rpq7eyd\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Adicionar Pessoa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"FULLNAME\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"pm.environment.set(\"EMAIL\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"PWD\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"No body should be returned\", function () {\r",
									"    let res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Location is present\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"    let locationHeader = pm.response.headers.get(\"Location\");\r",
									"    pm.environment.set(\"ID\",locationHeader.substring(locationHeader.lastIndexOf('/') + 1));\r",
									"\r",
									"    let stage = parseInt(pm.environment.get(\"STAGE\"));\r",
									"\r",
									"    if(stage == 0){\r",
									"        pm.environment.set(\"STAGE\",1);\r",
									"        postman.setNextRequest(\"Detalhes da Pessoa\");\r",
									"    }\r",
									"    \r",
									"    if(stage == 2){\r",
									"\r",
									"        var test = pm.environment.get(\"TOTALPESSOA\");                \r",
									"        pm.environment.set(\"TOTALPESSOA\",parseInt(test)+1);\r",
									"        postman.setNextRequest(\"Adicionar Pessoa\");\r",
									"\r",
									"        if(parseInt(test) == 9){\r",
									"            pm.environment.set(\"STAGE\",3);\r",
									"            postman.setNextRequest(\"Listar Pessoas\");\r",
									"        }\r",
									"    \r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{FULLNAME}}\",\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"password\": \"{{PWD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{SERVER}}/api/pessoas",
							"protocol": "http",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"api",
								"pessoas"
							]
						}
					},
					"response": [
						{
							"name": "Pessoa Adicionada",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{FULLNAME}}\",\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"password\": \"{{PWD}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Location",
									"value": "/api/pessoas/1"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:51:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Detalhes da Pessoa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let passed = false;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    passed = true;\r",
									"});\r",
									"\r",
									"pm.test(`Field ID should match ${pm.environment.get(\"ID\")}`, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"ID\")));\r",
									"});\r",
									"\r",
									"pm.test(`Field FULLNAME should match ${pm.environment.get(\"FULLNAME\")}`, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(`Expecting ${jsonData.nome} to eql ${pm.environment.get(\"FULLNAME\")}`);\r",
									"    pm.expect(jsonData.nome).to.eql(pm.environment.get(\"FULLNAME\"));\r",
									"});\r",
									"\r",
									"pm.test(`Field EMAIL should match ${pm.environment.get(\"EMAIL\")}`, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(`Expecting ${jsonData.email} to eql ${pm.environment.get(\"EMAIL\")}`);\r",
									"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"EMAIL\"));    \r",
									"});\r",
									"\r",
									"pm.test(`Field PWD should match ${pm.environment.get(\"PWD\")}`, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(`Expecting ${jsonData.password} to eql ${pm.environment.get(\"PWD\")}`);\r",
									"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"PWD\"));\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\":\"object\",\r",
									"    \"properties\":{\r",
									"        \"id\":{\r",
									"            \"type\":\"integer\"\r",
									"        },\r",
									"        \"nome\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"email\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"password\":{\r",
									"            \"type\":\"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\":[ \"id\",\"nome\",\"email\",\"password\" ]\r",
									"};\r",
									"\r",
									"pm.test('Validating Schema',() =>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let stage = parseInt(pm.environment.get(\"STAGE\"));\r",
									"\r",
									"if(stage == 1){    \r",
									"    postman.setNextRequest(\"Listar Pessoas\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Remover Pessoa\");\r",
									"}\r",
									"\r",
									"if(!passed){\r",
									"    pm.environment.set(\"STAGE\",6);\r",
									"    postman.setNextRequest(\"Hello World\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
							"protocol": "http",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"api",
								"pessoas",
								"{{ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Detalhes da Pessoa",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas",
										"{{ID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:53:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"nome\": \"Lynn Cassin\",\n    \"email\": \"Chad.Lang44@hotmail.com\",\n    \"password\": \"cDT7orB8Rpq7eyd\"\n}"
						}
					]
				},
				{
					"name": "Atualizar Pessoa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"FULLNAME\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"pm.environment.set(\"EMAIL\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"PWD\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"No body should be returned\", function () {\r",
									"    let res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});\r",
									"\r",
									"let stage = parseInt(pm.environment.get(\"STAGE\"));\r",
									"pm.environment.set(\"STAGE\",2);\r",
									"postman.setNextRequest(\"Detalhes da Pessoa\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{FULLNAME}}\",\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"password\": \"{{PWD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
							"protocol": "http",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"api",
								"pessoas",
								"{{ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Atualizar Pessoa",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{FULLNAME}}\",\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"password\": \"{{PWD}}_new\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas",
										"{{ID}}"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:53:19 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Remover Pessoa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"No body should be returned\", function () {\r",
									"    let res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Listar Pessoas\");\r",
									"\r",
									"let stage = parseInt(pm.environment.get(\"STAGE\"));    \r",
									"\r",
									"if(stage === 5){\r",
									"\r",
									"    var total = parseInt(pm.environment.get(\"TOTALPESSOA\"));\r",
									"    total--;\r",
									"    if(total > 0)    \r",
									"        postman.setNextRequest(\"Adicionar Pessoa\");\r",
									"    \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
							"protocol": "http",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"api",
								"pessoas",
								"{{ID}}"
							]
						}
					},
					"response": [
						{
							"name": "Remover Pessoa",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{SERVER}}/api/pessoas/{{ID}}",
									"protocol": "http",
									"host": [
										"{{SERVER}}"
									],
									"path": [
										"api",
										"pessoas",
										"{{ID}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 26 Aug 2021 01:53:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Hello World",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches Hello World\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Hello World\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{SERVER}}/api/hello",
					"protocol": "http",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"hello"
					]
				}
			},
			"response": []
		}
	]
}